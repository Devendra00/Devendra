Git reflog: manage reflog information

1.git reflog show (show all head activities)
2.git reflog --all (show all head activities w.r.t branches)
3.git reflog delete HEAD@{2} (we can also delete for perticular branch also)
4.git reflog -n 10 (shows first 10 reflogs)

git rev-list:
5.git rev-list --all (shows all the commit_ids)

ls-files:
6.git ls-files (shows all the files in staging and working tree)

7.git cherry-pick <cm-id>  (this will take the cm-id to top,if any conflict occur then need 
to resolve it then we need to create new cm-id which will be at top in log )
8.git cherry-pick --quit  (--abort will will stop cherry pick and goes to previous state where as 
quit put the both codes in same file when conflict occur.)

Git Archive:

9.git archive -o latest.zip HEAD (zip file is created for latest commit and it also contain all the files with 
latest changes.)

10.git tag <tag_name> <branchname> (here we can create tag for other branch also)

Git clean :

It removes the untracked files
Normally, only files unknown to Git are removed, but if the -x option is specified, ignored files are also removed

git gc :

compressing file revisions (to reduce disk space and increase performance) and removing unreachable objects which may have been created from prior running of git add.

git rev-parse
It is plumbing command - Pick out and massage(manipulate) parameters , i.e we can get manupulated outputs

removing untracked files:

a.git checkout -- <file>
b.git reset --hard


For only files already tracked in current working tree:

git add -u
It will add only modified and deleted files but NOT NEW FIELS

git add -A -- it is similar to --all

Recursive merging:
1. create branch from master i.e hotfix
2. do commits both in master and also in hotfix as well.
3. now merge hotfix to master, here parent commit is different in master(as we hve done commit in master), in this case recursive merging is done and new commit id is genrated.

Fast-forward merging:



.gitignore :
touch .gitignore
after creating the file we need to add file names or paths  (sample.txt / *.txt ....) in .gitignore file.
Note : in case if it is not working then we need remove from cache (git rm --cached file_name)

